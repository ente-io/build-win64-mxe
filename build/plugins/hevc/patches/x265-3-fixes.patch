This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 12 Jun 2020 11:20:00 +0200
Subject: [PATCH 1/2] Fixes for the llvm-mingw ARM build


diff --git a/source/CMakeLists.txt b/source/CMakeLists.txt
index 1111111..2222222 100644
--- a/source/CMakeLists.txt
+++ b/source/CMakeLists.txt
@@ -44,7 +44,7 @@ else()
     string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" SYSPROC)
 endif()
 set(X86_ALIASES x86 i386 i686 x86_64 amd64)
-set(ARM_ALIASES armv6l armv7l)
+set(ARM_ALIASES armv6l armv7l armv7)
 set(ARM64_ALIASES arm64 arm64e aarch64)
 list(FIND X86_ALIASES "${SYSPROC}" X86MATCH)
 list(FIND ARM_ALIASES "${SYSPROC}" ARMMATCH)
diff --git a/source/common/cpu.cpp b/source/common/cpu.cpp
index 1111111..2222222 100644
--- a/source/common/cpu.cpp
+++ b/source/common/cpu.cpp
@@ -44,6 +44,15 @@
 #if X265_ARCH_ARM && !defined(HAVE_NEON)
 #include <signal.h>
 #include <setjmp.h>
+
+#ifdef __MINGW32__
+// Windows does not have sigjmp_buf, sigsetjmp and siglongjmp its
+// functionality is provided by plain jmp_buf, setjmp and longjmp.
+#define sigjmp_buf jmp_buf
+#define sigsetjmp(env, savemask) setjmp(env)
+#define siglongjmp(env, val) longjmp(env, val)
+#endif
+
 static sigjmp_buf jmpbuf;
 static volatile sig_atomic_t canjump = 0;
 
@@ -335,7 +344,7 @@ uint32_t cpu_detect(bool benableavx512 )
     return cpu;
 }
 
-#elif X265_ARCH_ARM
+#elif ENABLE_ASSEMBLY && X265_ARCH_ARM
 
 extern "C" {
 void PFX(cpu_neon_test)(void);
