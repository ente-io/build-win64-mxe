From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lovell Fuller <github@lovell.info>
Date: Wed, 1 May 2024 09:35:05 +0100
Subject: [PATCH 1/2] Sanity check SRATIONAL denominator before use of abs()

Calling abs(INT32_MIN) will overflow the int type.

Upstream-Status: Backport [https://github.com/libexif/libexif/commit/00ee559ac8293c6ab9b0b4d26d3650ec89d2b1fc]

diff --git a/libexif/exif-entry.c b/libexif/exif-entry.c
index 1111111..2222222 100644
--- a/libexif/exif-entry.c
+++ b/libexif/exif-entry.c
@@ -571,7 +571,7 @@ exif_entry_format_value(ExifEntry *e, char *val, size_t maxlen)
 			}
 			v_srat = exif_get_srational (
 				e->data + 8 * i, o);
-			if (v_srat.denominator) {
+			if (v_srat.denominator && v_srat.denominator > INT32_MIN) {
 				int decimals = (int)(log10(abs(v_srat.denominator))-0.08+1.0);
 				snprintf (val+len, maxlen-len, "%2.*f",
 					  decimals,

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lovell Fuller <github@lovell.info>
Date: Mon, 9 Dec 2024 13:40:30 +0000
Subject: [PATCH 2/2] data: skip invalid tags rather than abort when not recursing

Commit cdf1e32 fixed a vulnerability by aborting early, however the
problem it addressed was able to occur only when parsing nested
directories.

By aborting early, EXIF metadata from many Samsung devices could
no longer be parsed as these often contain invalid thumbnail
offsets/lengths.

With this change, the vulnerability remains fixed and EXIF metadata
from Samsung devices can be parsed (with invalid tags skipped).

Upstream-Status: Submitted [https://github.com/libexif/libexif/pull/183]

diff --git a/libexif/exif-data.c b/libexif/exif-data.c
index 1111111..2222222 100644
--- a/libexif/exif-data.c
+++ b/libexif/exif-data.c
@@ -454,7 +454,9 @@ exif_data_load_data_content (ExifData *data, ExifIfd ifd,
 			if (o >= ds) {
 				exif_log (data->priv->log, EXIF_LOG_CODE_CORRUPT_DATA, "ExifData",
 					  "Tag data past end of buffer (%u > %u)", offset+2, ds);
-				return;
+				if (recursion_cost > 0)
+					return;
+				break;
 			}
 			/* FIXME: IFD_POINTER tags aren't marked as being in a
 			 * specific IFD, so exif_tag_get_name_in_ifd won't work
